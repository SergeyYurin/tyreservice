export declare type RequiredExcept<T, K extends keyof T> = T & Required<Omit<T, K>>;
declare type RequiredOptional<T extends object> = Exclude<{
    [K in keyof T]: T extends Record<K, T[K]> ? never : K;
}[keyof T], undefined>;
export declare type DefaultOptionalOptions<T extends object> = Required<Pick<T, RequiredOptional<T>>>;
export declare function applyOptionalDefaults<T extends object>(params: T, defaults: DefaultOptionalOptions<T>): Required<T>;
export {};
